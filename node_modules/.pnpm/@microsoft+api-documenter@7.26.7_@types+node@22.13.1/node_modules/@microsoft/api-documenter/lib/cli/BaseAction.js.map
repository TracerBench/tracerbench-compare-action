{"version":3,"file":"BaseAction.js","sourceRoot":"","sources":["../../src/cli/BaseAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport type * as tsdoc from '@microsoft/tsdoc';\n\nimport {\n  CommandLineAction,\n  type CommandLineStringParameter,\n  type ICommandLineActionOptions\n} from '@rushstack/ts-command-line';\nimport { FileSystem } from '@rushstack/node-core-library';\nimport {\n  ApiModel,\n  type ApiItem,\n  ApiItemContainerMixin,\n  ApiDocumentedItem,\n  type IResolveDeclarationReferenceResult\n} from '@microsoft/api-extractor-model';\nimport { Colorize } from '@rushstack/terminal';\n\nexport interface IBuildApiModelResult {\n  apiModel: ApiModel;\n  inputFolder: string;\n  outputFolder: string;\n}\n\nexport abstract class BaseAction extends CommandLineAction {\n  private readonly _inputFolderParameter: CommandLineStringParameter;\n  private readonly _outputFolderParameter: CommandLineStringParameter;\n\n  protected constructor(options: ICommandLineActionOptions) {\n    super(options);\n\n    // override\n    this._inputFolderParameter = this.defineStringParameter({\n      parameterLongName: '--input-folder',\n      parameterShortName: '-i',\n      argumentName: 'FOLDER1',\n      description:\n        `Specifies the input folder containing the *.api.json files to be processed.` +\n        ` If omitted, the default is \"./input\"`\n    });\n\n    this._outputFolderParameter = this.defineStringParameter({\n      parameterLongName: '--output-folder',\n      parameterShortName: '-o',\n      argumentName: 'FOLDER2',\n      description:\n        `Specifies the output folder where the documentation will be written.` +\n        ` ANY EXISTING CONTENTS WILL BE DELETED!` +\n        ` If omitted, the default is \"./${this.actionName}\"`\n    });\n  }\n\n  protected buildApiModel(): IBuildApiModelResult {\n    const apiModel: ApiModel = new ApiModel();\n\n    const inputFolder: string = this._inputFolderParameter.value || './input';\n    if (!FileSystem.exists(inputFolder)) {\n      throw new Error('The input folder does not exist: ' + inputFolder);\n    }\n\n    const outputFolder: string = this._outputFolderParameter.value || `./${this.actionName}`;\n    FileSystem.ensureFolder(outputFolder);\n\n    for (const filename of FileSystem.readFolderItemNames(inputFolder)) {\n      if (filename.match(/\\.api\\.json$/i)) {\n        console.log(`Reading ${filename}`);\n        const filenamePath: string = path.join(inputFolder, filename);\n        apiModel.loadPackage(filenamePath);\n      }\n    }\n\n    this._applyInheritDoc(apiModel, apiModel);\n\n    return { apiModel, inputFolder, outputFolder };\n  }\n\n  // TODO: This is a temporary workaround.  The long term plan is for API Extractor's DocCommentEnhancer\n  // to apply all @inheritDoc tags before the .api.json file is written.\n  // See DocCommentEnhancer._applyInheritDoc() for more info.\n  private _applyInheritDoc(apiItem: ApiItem, apiModel: ApiModel): void {\n    if (apiItem instanceof ApiDocumentedItem) {\n      if (apiItem.tsdocComment) {\n        const inheritDocTag: tsdoc.DocInheritDocTag | undefined = apiItem.tsdocComment.inheritDocTag;\n\n        if (inheritDocTag && inheritDocTag.declarationReference) {\n          // Attempt to resolve the declaration reference\n          const result: IResolveDeclarationReferenceResult = apiModel.resolveDeclarationReference(\n            inheritDocTag.declarationReference,\n            apiItem\n          );\n\n          if (result.errorMessage) {\n            console.log(\n              Colorize.yellow(\n                `Warning: Unresolved @inheritDoc tag for ${apiItem.displayName}: ` + result.errorMessage\n              )\n            );\n          } else {\n            if (\n              result.resolvedApiItem instanceof ApiDocumentedItem &&\n              result.resolvedApiItem.tsdocComment &&\n              result.resolvedApiItem !== apiItem\n            ) {\n              this._copyInheritedDocs(apiItem.tsdocComment, result.resolvedApiItem.tsdocComment);\n            }\n          }\n        }\n      }\n    }\n\n    // Recurse members\n    if (ApiItemContainerMixin.isBaseClassOf(apiItem)) {\n      for (const member of apiItem.members) {\n        this._applyInheritDoc(member, apiModel);\n      }\n    }\n  }\n\n  /**\n   * Copy the content from `sourceDocComment` to `targetDocComment`.\n   * This code is borrowed from DocCommentEnhancer as a temporary workaround.\n   */\n  private _copyInheritedDocs(targetDocComment: tsdoc.DocComment, sourceDocComment: tsdoc.DocComment): void {\n    targetDocComment.summarySection = sourceDocComment.summarySection;\n    targetDocComment.remarksBlock = sourceDocComment.remarksBlock;\n\n    targetDocComment.params.clear();\n    for (const param of sourceDocComment.params) {\n      targetDocComment.params.add(param);\n    }\n    for (const typeParam of sourceDocComment.typeParams) {\n      targetDocComment.typeParams.add(typeParam);\n    }\n    targetDocComment.returnsBlock = sourceDocComment.returnsBlock;\n\n    targetDocComment.inheritDocTag = undefined;\n  }\n}\n"]}