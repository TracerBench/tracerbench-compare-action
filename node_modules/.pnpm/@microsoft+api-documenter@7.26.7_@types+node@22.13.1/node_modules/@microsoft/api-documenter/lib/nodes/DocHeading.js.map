{"version":3,"file":"DocHeading.js","sourceRoot":"","sources":["../../src/nodes/DocHeading.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,4CAAoE;AACpE,2DAAwD;AAUxD;;GAEG;AACH,MAAa,UAAW,SAAQ,eAAO;IAIrC;;;OAGG;IACH,YAAmB,UAAiC;QAClD,KAAK,CAAC,UAAU,CAAC,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAEnE,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;YACrC,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;QAClF,CAAC;IACH,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,OAAO,qCAAiB,CAAC,OAAO,CAAC;IACnC,CAAC;CACF;AAtBD,gCAsBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { type IDocNodeParameters, DocNode } from '@microsoft/tsdoc';\nimport { CustomDocNodeKind } from './CustomDocNodeKind';\n\n/**\n * Constructor parameters for {@link DocHeading}.\n */\nexport interface IDocHeadingParameters extends IDocNodeParameters {\n  title: string;\n  level?: number;\n}\n\n/**\n * Represents a section header similar to an HTML `<h1>` or `<h2>` element.\n */\nexport class DocHeading extends DocNode {\n  public readonly title: string;\n  public readonly level: number;\n\n  /**\n   * Don't call this directly.  Instead use {@link TSDocParser}\n   * @internal\n   */\n  public constructor(parameters: IDocHeadingParameters) {\n    super(parameters);\n    this.title = parameters.title;\n    this.level = parameters.level !== undefined ? parameters.level : 1;\n\n    if (this.level < 1 || this.level > 5) {\n      throw new Error('IDocHeadingParameters.level must be a number between 1 and 5');\n    }\n  }\n\n  /** @override */\n  public get kind(): string {\n    return CustomDocNodeKind.Heading;\n  }\n}\n"]}