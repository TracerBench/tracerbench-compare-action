{"version":3,"file":"DocTable.js","sourceRoot":"","sources":["../../src/nodes/DocTable.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,4CAAoE;AACpE,2DAAwD;AACxD,+CAA4C;AAW5C;;GAEG;AACH,MAAa,QAAS,SAAQ,eAAO;IAKnC,YAAmB,UAA+B,EAAE,IAAiC;QACnF,KAAK,CAAC,UAAU,CAAC,CAAC;QAElB,IAAI,CAAC,MAAM,GAAG,IAAI,yBAAW,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAEhB,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,UAAU,CAAC,YAAY,EAAE,CAAC;gBAC5B,IAAI,UAAU,CAAC,WAAW,EAAE,CAAC;oBAC3B,MAAM,IAAI,KAAK,CACb,sEAAsE;wBACpE,2BAA2B,CAC9B,CAAC;gBACJ,CAAC;gBACD,KAAK,MAAM,QAAQ,IAAI,UAAU,CAAC,YAAY,EAAE,CAAC;oBAC/C,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;gBACzC,CAAC;YACH,CAAC;iBAAM,IAAI,UAAU,CAAC,WAAW,EAAE,CAAC;gBAClC,KAAK,MAAM,IAAI,IAAI,UAAU,CAAC,WAAW,EAAE,CAAC;oBAC1C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC;QACH,CAAC;QAED,IAAI,IAAI,EAAE,CAAC;YACT,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;gBACvB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC;QACH,CAAC;IACH,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,OAAO,qCAAiB,CAAC,KAAK,CAAC;IACjC,CAAC;IAED,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,MAAM,CAAC,GAAgB;QAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAEM,eAAe;QACpB,MAAM,GAAG,GAAgB,IAAI,yBAAW,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,OAAO,GAAG,CAAC;IACb,CAAC;IAED,gBAAgB;IACN,eAAe;QACvB,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;CACF;AA3DD,4BA2DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { type IDocNodeParameters, DocNode } from '@microsoft/tsdoc';\nimport { CustomDocNodeKind } from './CustomDocNodeKind';\nimport { DocTableRow } from './DocTableRow';\nimport type { DocTableCell } from './DocTableCell';\n\n/**\n * Constructor parameters for {@link DocTable}.\n */\nexport interface IDocTableParameters extends IDocNodeParameters {\n  headerCells?: ReadonlyArray<DocTableCell>;\n  headerTitles?: string[];\n}\n\n/**\n * Represents table, similar to an HTML `<table>` element.\n */\nexport class DocTable extends DocNode {\n  public readonly header: DocTableRow;\n\n  private _rows: DocTableRow[];\n\n  public constructor(parameters: IDocTableParameters, rows?: ReadonlyArray<DocTableRow>) {\n    super(parameters);\n\n    this.header = new DocTableRow({ configuration: this.configuration });\n    this._rows = [];\n\n    if (parameters) {\n      if (parameters.headerTitles) {\n        if (parameters.headerCells) {\n          throw new Error(\n            'IDocTableParameters.headerCells and IDocTableParameters.headerTitles' +\n              ' cannot both be specified'\n          );\n        }\n        for (const cellText of parameters.headerTitles) {\n          this.header.addPlainTextCell(cellText);\n        }\n      } else if (parameters.headerCells) {\n        for (const cell of parameters.headerCells) {\n          this.header.addCell(cell);\n        }\n      }\n    }\n\n    if (rows) {\n      for (const row of rows) {\n        this.addRow(row);\n      }\n    }\n  }\n\n  /** @override */\n  public get kind(): string {\n    return CustomDocNodeKind.Table;\n  }\n\n  public get rows(): ReadonlyArray<DocTableRow> {\n    return this._rows;\n  }\n\n  public addRow(row: DocTableRow): void {\n    this._rows.push(row);\n  }\n\n  public createAndAddRow(): DocTableRow {\n    const row: DocTableRow = new DocTableRow({ configuration: this.configuration });\n    this.addRow(row);\n    return row;\n  }\n\n  /** @override */\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\n    return [this.header, ...this._rows];\n  }\n}\n"]}