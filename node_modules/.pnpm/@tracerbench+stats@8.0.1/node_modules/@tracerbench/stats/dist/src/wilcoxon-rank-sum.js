"use strict";
// ! we are not using this ATM; rather using the conf interval isSig
// all exports are alpha of 0.05 for two-tailed tests
// using (array length) as N value up to 25 anything over uses normal approximation
// unpaired data with two samples
// also known as the mann-whitney-test
// prettier-ignore
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWilcoxonRankSumTest = exports.getSampleUStat = exports.getRankSum = exports.rankSamples = exports.getSamples = exports.getMergedSortedSamples = exports.wilcoxonRankSumTable = void 0;
exports.wilcoxonRankSumTable = [0, 0, 0, 10, 17, 26, 36, 49, 62, 78, 96, 115, 136, 160, 184, 211, 240, 270, 303, 337, 373, 411, 451, 491, 536];
// prettier-ignore
function getMergedSortedSamples(control, experiment) {
    return [...control, ...experiment].sort((a, b) => a - b);
}
exports.getMergedSortedSamples = getMergedSortedSamples;
function getSamples(a, pool) {
    a.sort((a, b) => a - b);
    return a.map((val) => {
        return {
            val,
            rank: 0,
            pool,
            samples: a
        };
    });
}
exports.getSamples = getSamples;
// prettier-ignore
function rankSamples(samples) {
    const sa = samples;
    sa.forEach((sample) => {
        sample.pool.forEach((p, i) => {
            if (sample.val === p) {
                sample.rank = i + 1;
            }
        });
    });
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function countDuplicates(obj, num) {
        obj[num] = (++obj[num] || 1);
        return obj;
    }
    sa.forEach((sample) => {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const acc = sample.pool.reduce(countDuplicates, {});
        if (acc[sample.val] > 1) {
            sample.rank = (sample.rank - 0.5);
        }
    });
    return sa;
}
exports.rankSamples = rankSamples;
function getRankSum(rankedSamples) {
    return rankedSamples.reduce((currentSum, sample) => {
        return currentSum + sample.rank;
    }, 0);
}
exports.getRankSum = getRankSum;
function getSampleUStat(rankSum, N) {
    return rankSum - (N * (N + 1)) / 2;
}
exports.getSampleUStat = getSampleUStat;
/**
 * Wilcoxon Rank Sum Test
 * independent test of 2 groups tested once
 * un-paired two-tailed test alpha 0.05 critical values
 *
 * @param control - Control as array of numbers
 * @param experiment - Experiment as array of numbers
 */
function getWilcoxonRankSumTest(control, experiment) {
    const N = control.length;
    const samplePool = getMergedSortedSamples(control, experiment);
    const controlSamples = getSamples(control, samplePool);
    const experimentSamples = getSamples(experiment, samplePool);
    const rankedControlSamples = rankSamples(controlSamples);
    const rankedExperimentSamples = rankSamples(experimentSamples);
    const controlRankSum = getRankSum(rankedControlSamples);
    const experimentRankSum = getRankSum(rankedExperimentSamples);
    const uStatControl = getSampleUStat(controlRankSum, N);
    const uStatExperiment = getSampleUStat(experimentRankSum, N);
    const uStat = Math.min(uStatControl, uStatExperiment);
    if (N > 25) {
        throw new Error(`Sample sizes greater than 25 are not supported. Your sample size is ${N}`);
    }
    const uCrit = exports.wilcoxonRankSumTable[N];
    // !! important this is lt not gt
    return uStat < uCrit;
}
exports.getWilcoxonRankSumTest = getWilcoxonRankSumTest;
//# sourceMappingURL=wilcoxon-rank-sum.js.map