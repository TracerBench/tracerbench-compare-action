"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.liveTrace = void 0;
const chrome_debugging_client_1 = require("chrome-debugging-client");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const utils_1 = require("./utils");
const DEVTOOLS_CATEGORIES = [
    '-*',
    'devtools.timeline',
    'viz',
    'benchmark',
    'blink',
    'cc',
    'gpu',
    'v8',
    'v8.execute',
    'disabled-by-default-devtools.timeline',
    'disabled-by-default-devtools.timeline.frame',
    'toplevel',
    'blink.console',
    'blink.user_timing',
    'latencyInfo',
    'disabled-by-default-v8.cpu_profiler',
    'disabled-by-default-v8.cpu_profiler',
    'disabled-by-default.cpu_profiler',
    'disabled-by-default.cpu_profiler.debug',
    'renderer',
    'cpu_profiler'
];
async function liveTrace(url, tbResultsFolder, cookies, conditions) {
    const chrome = chrome_debugging_client_1.spawnChrome({ headless: true });
    const traceFile = path_1.join(tbResultsFolder, 'trace.json');
    const traceEvents = [];
    const traceObj = { traceEvents: [] };
    try {
        const browser = chrome.connection;
        const chromeTab = await utils_1.getTab(browser);
        // enable Network / Page
        await Promise.all([
            chromeTab.send('Page.enable'),
            chromeTab.send('Network.enable')
        ]);
        // clear and disable cache
        await chromeTab.send('Network.clearBrowserCache');
        await chromeTab.send('Network.setCacheDisabled', { cacheDisabled: true });
        // emulate and set
        await utils_1.emulate(chromeTab, conditions);
        await utils_1.setCookies(chromeTab, cookies);
        // series of dataCollected events
        browser.on('Tracing.dataCollected', (event) => {
            traceEvents.push(event);
        });
        await browser.send('Tracing.start', {
            traceConfig: {
                includedCategories: DEVTOOLS_CATEGORIES
            }
        });
        // navigate to a blank page first
        await Promise.all([
            chromeTab.send('Page.navigate', { url: 'about:blank' }),
            utils_1.wait(1000)
        ]);
        await Promise.all([
            chromeTab.send('Page.navigate', { url }),
            chromeTab.until('Page.loadEventFired')
        ]);
        await browser.send('Tracing.end');
        await browser.until('Tracing.tracingComplete');
        // merge the buffer trace events
        traceEvents.forEach((i) => {
            i.value.forEach((ii) => {
                traceObj.traceEvents.push(ii);
            });
        });
        fs_extra_1.writeFileSync(traceFile, JSON.stringify(traceObj));
        await chrome.close();
    }
    catch (e) {
        throw new Error(`Live Trace could not be captured. ${e}`);
    }
    finally {
        if (chrome) {
            await chrome.dispose();
        }
    }
    return traceObj;
}
exports.liveTrace = liveTrace;
//# sourceMappingURL=live-trace.js.map