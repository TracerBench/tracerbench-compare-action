"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chrome_debugging_client_1 = require("chrome-debugging-client");
function createIsolatedPageBenchmark(group, samplePage, options) {
    return {
        group,
        setup
    };
    async function setup() {
        const chrome = (0, chrome_debugging_client_1.spawnChrome)(options);
        return {
            sample,
            dispose
        };
        function sample(iteration, isTrial, raceCancellation) {
            return sampleIsolatedPage(chrome.connection, samplePage, iteration, isTrial, raceCancellation);
        }
        async function dispose() {
            try {
                // try graceful shutdown
                await chrome.close();
            }
            catch (_a) {
                // TODO log error to debug callback
                await chrome.dispose();
            }
        }
    }
}
exports.default = createIsolatedPageBenchmark;
function sampleIsolatedPage(browser, samplePage, iteration, isTrial, raceCancel) {
    return usingBrowserContext(browser, async (browserContextId) => {
        const page = await createPage(browserContextId, browser, raceCancel);
        const sample = await samplePage(page, iteration, isTrial, raceCancel);
        return sample;
    }, raceCancel);
}
async function createPage(browserContextId, browser, raceCancel) {
    const { targetId } = await browser.send('Target.createTarget', {
        url: 'about:blank',
        browserContextId
    }, raceCancel);
    const page = await browser.attachToTarget(targetId, raceCancel);
    const { targetInfos } = await browser.send('Target.getTargets', undefined, raceCancel);
    // close other page targets
    for (const targetInfo of targetInfos) {
        if (targetInfo.type === 'page' && targetInfo.targetId !== targetId) {
            await browser.send('Target.closeTarget', {
                targetId: targetInfo.targetId
            }, raceCancel);
        }
    }
    await browser.send('Target.activateTarget', { targetId }, raceCancel);
    return page;
}
async function usingBrowserContext(browser, takeSample, raceCancel) {
    const { browserContextId } = await browser.send('Target.createBrowserContext', {}, raceCancel);
    try {
        return await takeSample(browserContextId);
    }
    finally {
        await browser.send('Target.disposeBrowserContext', { browserContextId });
    }
}
//# sourceMappingURL=create-isolated-page-benchmark.js.map