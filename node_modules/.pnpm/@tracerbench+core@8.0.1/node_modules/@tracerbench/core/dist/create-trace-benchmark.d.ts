import { TraceStreamJson } from '@tracerbench/trace-event';
import type { ProtocolConnection, SpawnOptions } from 'chrome-debugging-client';
import type { RaceCancellation } from 'race-cancellation';
import type { Benchmark } from './run';
import type { UsingTracingCallback } from './util/run-trace';
export interface TraceBenchmarkOptions {
    spawnOptions: Partial<SpawnOptions>;
    traceOptions: Partial<TraceOptions>;
}
export interface TraceOptions {
    captureDevtoolsTimeline: boolean;
    captureV8RuntimeStats: boolean;
    captureCpuProfile: boolean;
    captureFilmStrip: boolean;
    capturePaintProfile: boolean;
    additionalCategories: string[];
    additionalTrialCategories: string[];
    saveTraceAs: SaveTraceAsFn;
}
export declare type TraceFn = (usingTracing: UsingTracingCallback) => Promise<TraceStreamJson>;
export declare type SampleTraceFn<TSample> = (page: ProtocolConnection, i: number, isTrial: boolean, raceCancellation: RaceCancellation, trace: TraceFn) => Promise<TSample>;
export declare type SaveTraceAsFn = (group: string, iteration: number) => string;
export default function createTraceBenchmark<TSample>(group: string, sampleTrace: SampleTraceFn<TSample>, options?: Partial<TraceBenchmarkOptions>): Benchmark<TSample>;
//# sourceMappingURL=create-trace-benchmark.d.ts.map