"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const create_isolated_page_benchmark_1 = require("./create-isolated-page-benchmark");
const run_trace_1 = require("./util/run-trace");
function disabledByDefault(category) {
    return `disabled-by-default-${category}`;
}
const defaultCategories = [
    'devtools.timeline',
    'v8.execute',
    'blink.user_timing',
    'loading',
    'latencyInfo'
];
const captureAllDevtoolsTimelineCategories = [
    'devtools.timeline*',
    disabledByDefault('devtools.timeline*')
];
const captureDevtoolsTimelineCategories = [
    'blink.console',
    disabledByDefault('devtools.timeline'),
    disabledByDefault('devtools.timeline.frame'),
    disabledByDefault('devtools.timeline.stack')
];
const captureV8RuntimeStatsCategories = [
    'v8',
    disabledByDefault('v8.runtime_stats')
];
const captureCpuProfileCategories = [
    disabledByDefault('v8.cpu_profiler'),
    disabledByDefault('v8.runtime_stats_sampling')
];
const captureCpuProfilesHiresCategory = disabledByDefault('v8.cpu_profiler.hires');
const captureFilmStripCategory = disabledByDefault('devtools.screenshot');
const capturePaintProfileCategories = [
    disabledByDefault('devtools.timeline.layers'),
    disabledByDefault('devtools.timeline.picture'),
    disabledByDefault('blink.graphics_context_annotations')
];
function createTraceBenchmark(group, sampleTrace, options = {}) {
    const { spawnOptions, traceOptions = {} } = options;
    const { saveTraceAs = () => void 0 } = traceOptions;
    return (0, create_isolated_page_benchmark_1.default)(group, async (page, iteration, isTrial, raceCancellation) => sampleTrace(page, iteration, isTrial, raceCancellation, (usingTracing) => (0, run_trace_1.default)(page, getCategories(isTrial, traceOptions), raceCancellation, usingTracing, saveTraceAs(group, iteration))), spawnOptions);
}
exports.default = createTraceBenchmark;
function getCategories(isTrial, options) {
    const categories = ['-*', ...defaultCategories];
    if (isTrial) {
        categories.push(...captureAllDevtoolsTimelineCategories, ...captureCpuProfileCategories, captureCpuProfilesHiresCategory, captureFilmStripCategory, ...capturePaintProfileCategories);
        if (options.additionalTrialCategories) {
            categories.push(...options.additionalTrialCategories);
        }
    }
    else {
        // include the basic disabled by default devtools categories
        if (options.captureDevtoolsTimeline) {
            categories.push(...captureDevtoolsTimelineCategories);
        }
        if (options.captureV8RuntimeStats) {
            // this breaks devtools display of CPU profile in dev tools
            categories.push(...captureV8RuntimeStatsCategories);
        }
        if (options.captureCpuProfile) {
            // includes runtime samples
            categories.push(...captureCpuProfileCategories);
        }
        if (options.captureFilmStrip) {
            categories.push(captureFilmStripCategory);
        }
        if (options.capturePaintProfile) {
            categories.push(...capturePaintProfileCategories);
        }
        if (options.additionalCategories) {
            categories.push(...options.additionalCategories);
        }
    }
    return categories;
}
//# sourceMappingURL=create-trace-benchmark.js.map