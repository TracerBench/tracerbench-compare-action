import { TRACE_EVENT_PHASE, TraceEventArgs, TraceEvents } from '@tracerbench/trace-event';
import type { AsyncBeginEventModel, AsyncEndEventModel, AsyncStepIntoEventModel, AsyncStepPastEventModel, BeginEventModel, ClockSyncEventModel, CompleteEventModel, CounterEventModel, CreateObjectEventModel, DeleteObjectEventModel, EndEventModel, EnterContextEventModel, EventModelCommon, EventModelTraceEvents, FlowBeginEventModel, FlowEndEventModel, FlowStepEventModel, InstantEventModel, LeaveContextEventModel, MarkEventModel, MemoryDumpEventModel, MetadataEventModel, NestableAsyncBeginEventModel, NestableAsyncEndEventModel, NestableAsyncInstantEventModel, ProcessId, SampleEventModel, SnapshotObjectEventModel, ThreadId } from '../types';
export declare type EventModelImpls = {
    [TPhase in TRACE_EVENT_PHASE]: EventModelImpl<TPhase>;
};
export declare type EventModelImplUnion = EventModelImpls[TRACE_EVENT_PHASE];
export declare type MetadataEventModelImpl = EventModelImpl<MetadataEventModel['ph']>;
export declare type BeginEventModelImpl = EventModelImpl<BeginEventModel['ph']>;
export declare type EndEventModelImpl = EventModelImpl<EndEventModel['ph']>;
export declare type CompleteEventModelImpl = EventModelImpl<CompleteEventModel['ph']>;
export declare type InstantEventModelImpl = EventModelImpl<InstantEventModel['ph']>;
export declare type MarkEventModelImpl = EventModelImpl<MarkEventModel['ph']>;
export default class EventModelImpl<TPhase extends TRACE_EVENT_PHASE = TRACE_EVENT_PHASE> implements EventModelCommon<TPhase> {
    ord: number;
    pid: ProcessId;
    tid: ThreadId;
    ph: TPhase;
    cat: string | string[];
    name: string;
    start: number;
    end: number;
    args: TraceEventArgs;
    parent: CompleteEventModel | undefined;
    traceEvent: EventModelTraceEvents[TPhase];
    constructor(traceEvent: EventModelTraceEvents[TPhase], ord: number);
    get duration(): number;
    isBegin(): this is BeginEventModelImpl;
    isEnd(): this is EventModelImpl<EndEventModel['ph']>;
    isComplete(): this is EventModelImpl<CompleteEventModel['ph']>;
    isInstant(): this is EventModelImpl<InstantEventModel['ph']>;
    isAsyncBegin(): this is EventModelImpl<AsyncBeginEventModel['ph']>;
    isAsyncStepInto(): this is EventModelImpl<AsyncStepIntoEventModel['ph']>;
    isAsyncStepPast(): this is EventModelImpl<AsyncStepPastEventModel['ph']>;
    isAsyncEnd(): this is EventModelImpl<AsyncEndEventModel['ph']>;
    isNestableAsyncBegin(): this is EventModelImpl<NestableAsyncBeginEventModel['ph']>;
    isNestableAsyncEnd(): this is EventModelImpl<NestableAsyncEndEventModel['ph']>;
    isNestableAsyncInstant(): this is EventModelImpl<NestableAsyncInstantEventModel['ph']>;
    isFlowBegin(): this is EventModelImpl<FlowBeginEventModel['ph']>;
    isFlowStep(): this is EventModelImpl<FlowStepEventModel['ph']>;
    isFlowEnd(): this is EventModelImpl<FlowEndEventModel['ph']>;
    isMetadata(): this is EventModelImpl<MetadataEventModel['ph']>;
    isCounter(): this is EventModelImpl<CounterEventModel['ph']>;
    isSample(): this is EventModelImpl<SampleEventModel['ph']>;
    isCreateObject(): this is EventModelImpl<CreateObjectEventModel['ph']>;
    isSnapshotObject(): this is EventModelImpl<SnapshotObjectEventModel['ph']>;
    isDeleteObject(): this is EventModelImpl<DeleteObjectEventModel['ph']>;
    isMemoryDump(): this is EventModelImpl<MemoryDumpEventModel['ph']>;
    isMark(): this is EventModelImpl<MarkEventModel['ph']>;
    isClockSync(): this is EventModelImpl<ClockSyncEventModel['ph']>;
    isEnterContext(): this is EventModelImpl<EnterContextEventModel['ph']>;
    isLeaveContext(): this is EventModelImpl<LeaveContextEventModel['ph']>;
    getArg(name: string): unknown;
    getStringArg(name: string, defaultValue: string): string;
    getStringArg(name: string, defaultValue?: undefined): string | undefined;
    getNumberArg(name: string, defaultValue: number): number;
    getNumberArg(name: string, defaultValue?: undefined): number | undefined;
    hasCategory(category: string | ((category: string) => boolean)): boolean;
    toJSON(): TraceEvents[TPhase];
}
//# sourceMappingURL=event-model-impl.d.ts.map