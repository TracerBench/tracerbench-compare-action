import { IConfig } from "@oclif/config";
import { ITBConfig, TBBaseCommand } from "../../command-config";
import { ParsedTitleConfigs } from "../../compare/generate-stats";
export interface IReportFlags {
    tbResultsFolder: string;
    config?: string;
    plotTitle?: string;
    isCIEnv?: boolean;
}
export default class CompareReport extends TBBaseCommand {
    static aliases: string[];
    static description: string;
    static flags: {
        tbResultsFolder: import("@oclif/command/lib/flags").IOptionFlag<string>;
        config: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        plotTitle: import("@oclif/command/lib/flags").IOptionFlag<string | undefined>;
        isCIEnv: import("@oclif/command/lib/flags").IOptionFlag<any>;
    };
    reportFlags: IReportFlags;
    constructor(argv: string[], config: IConfig);
    init(): Promise<void>;
    run(): Promise<void>;
    private logReportPaths;
    private printPDF;
    private parseFlags;
    private determineOutputFileNamePrefix;
    private createConsumableHTML;
    /**
     * Override the default server and plot title attributes
     *
     * @param tbConfig - Concerned only about the "servers" and "plotTitle"
     *   attribute
     * @param version - Browser version
     * @param plotTitle - Optional explicit title from cli flag
     */
    static resolveTitles(tbConfig: Partial<ITBConfig>, version: string, plotTitle?: string): ParsedTitleConfigs;
}
//# sourceMappingURL=report.d.ts.map