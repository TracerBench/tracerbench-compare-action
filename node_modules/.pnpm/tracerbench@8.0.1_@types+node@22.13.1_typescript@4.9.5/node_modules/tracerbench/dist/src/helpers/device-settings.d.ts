import Protocol from "devtools-protocol";
interface ScreenDimensions {
    width: number;
    height: number;
}
export interface Screens {
    horizontal: ScreenDimensions;
    vertical?: ScreenDimensions;
    [key: string]: any;
}
export interface EmulateDeviceSettingBase {
    userAgent: string;
    deviceScaleFactor: number;
    mobile: boolean;
    typeable: string;
}
export interface EmulateDeviceSetting {
    deviceMetricsOverride: Protocol.Emulation.SetDeviceMetricsOverrideRequest;
    userAgentOverride: Protocol.Emulation.SetUserAgentOverrideRequest;
    typeable: string;
}
export interface EmulateDeviceSettingCliOption extends EmulateDeviceSettingBase {
    screens: Screens;
}
declare const deviceSettings: EmulateDeviceSettingCliOption[];
/**
 * Iterate over deviceSettings until a match is found in the option's typable field. Extract the contents into EmulateDeviceSetting
 * formatted object
 *
 * @param key - One of typeable strings such as iphone-x
 * @param orientation - Either "vertical" or "horizontal"
 */
export declare function getEmulateDeviceSettingForKeyAndOrientation(key: string, orientation?: string): EmulateDeviceSetting;
export default deviceSettings;
//# sourceMappingURL=device-settings.d.ts.map