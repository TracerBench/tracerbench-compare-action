import type { IAsPercentage, ISevenFigureSummary } from "@tracerbench/stats";
import type { RegressionThresholdStat } from "../command-config/tb-config";
import { GenerateStats, HTMLSectionRenderData } from "./generate-stats";
import TBTable from "./tb-table";
export interface ICompareJSONResult {
    heading: string;
    phaseName: string;
    isSignificant: boolean;
    estimatorDelta: string;
    pValue: number;
    controlSampleCount: number;
    experimentSampleCount: number;
    confidenceInterval: string[];
    controlSevenFigureSummary: ISevenFigureSummary;
    experimentSevenFigureSummary: ISevenFigureSummary;
    asPercent: IAsPercentage;
}
export interface ICompareJSONResults {
    benchmarkTableData: ICompareJSONResult[];
    phaseTableData: ICompareJSONResult[];
    areResultsSignificant: boolean;
    isBelowRegressionThreshold: boolean;
    regressionThresholdStat: string;
}
declare type PhaseResultsFormatted = Array<Pick<HTMLSectionRenderData, "phase" | "hlDiff" | "isSignificant" | "ciMin" | "ciMax" | "pValue" | "asPercent">>;
export declare class CompareResults {
    benchmarkTable: TBTable;
    phaseTable: TBTable;
    benchmarkTableData: ICompareJSONResult[];
    phaseTableData: ICompareJSONResult[];
    phaseResultsFormatted: PhaseResultsFormatted;
    areResultsSignificant: boolean;
    isBelowRegressionThreshold: boolean;
    fidelity: number;
    regressionThreshold: number;
    regressionThresholdStat: RegressionThresholdStat;
    constructor(generateStats: GenerateStats, fidelity: number, regressionThreshold: number, regressionThresholdStat?: RegressionThresholdStat);
    private logMetaMessagesAndWarnings;
    private logStatSummaryReport;
    anyResultsSignificant(benchmarkIsSigArray: boolean[], phaseIsSigArray: boolean[]): boolean;
    allBelowRegressionThreshold(): boolean;
    stringifyJSON(): string;
    logTables(): void;
    logSummary(): void;
}
export {};
//# sourceMappingURL=compare-results.d.ts.map