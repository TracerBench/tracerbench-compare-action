import type { IConfidenceInterval } from "@tracerbench/stats";
import { Stats } from "@tracerbench/stats";
export interface ParsedTitleConfigs {
    servers: Array<{
        name: string;
    }>;
    plotTitle: string | undefined;
    browserVersion: string;
}
export declare type Sample = {
    duration: number;
    js: number;
    phases: Array<{
        phase: string;
        start: number;
        duration: number;
    }>;
};
export interface ITracerBenchTraceResult {
    meta: {
        browserVersion: string;
        cpus: string[];
        "product-version": string;
    };
    samples: Sample[];
    set: string;
}
declare type FormattedStatsSamples = {
    min: number;
    q1: number;
    median: number;
    q3: number;
    max: number;
    outliers: number[];
    samplesMS: number[];
};
declare type Frequency = {
    labels: string[];
    control: number[];
    experiment: number[];
};
export interface HTMLSectionRenderData {
    stats: Stats;
    isSignificant: boolean;
    ciMin: number;
    ciMax: number;
    hlDiff: number;
    phase: string;
    identifierHash: string;
    frequencyHash: string;
    sampleCount: number;
    servers?: Array<{
        name: string;
    }>;
    controlFormatedSamples: FormattedStatsSamples;
    experimentFormatedSamples: FormattedStatsSamples;
    frequency: Frequency;
    pValue: number;
    asPercent: IConfidenceInterval["asPercent"];
}
declare type CumulativeData = {
    categories: string[];
    controlData: number[][];
    experimentData: number[][];
};
export declare class GenerateStats {
    controlData: ITracerBenchTraceResult;
    experimentData: ITracerBenchTraceResult;
    reportTitles: ParsedTitleConfigs;
    durationSection: HTMLSectionRenderData;
    subPhaseSections: HTMLSectionRenderData[];
    cumulativeData: CumulativeData;
    constructor(controlData: ITracerBenchTraceResult, experimentData: ITracerBenchTraceResult, reportTitles: ParsedTitleConfigs);
    private generateData;
    /**
     * Extract the phases and page load time latency into sorted buckets by phase
     *
     * @param samples - Array of "sample" objects
     * @param valueGen - Calls this function to extract the value from the phase. A
     *   "phase" is passed containing duration and start
     */
    private bucketPhaseValues;
    /**
     * Instantiate the TB Stats Class. Format the data into HTMLSectionRenderData
     * structure.
     *
     * @param controlValues - Values for the control for the phase in microseconds not arranged
     * @param experimentValues - Values for the experiment for the phase in microseconds not arranged
     * @param phaseName - Name of the phase the values represent
     */
    private formatPhaseData;
    /**
     * Bucket the data for the cumulative chart. Ensure to convert to
     * milliseconds for presentation. Does not mutate samples.
     */
    private bucketCumulative;
}
export {};
//# sourceMappingURL=generate-stats.d.ts.map