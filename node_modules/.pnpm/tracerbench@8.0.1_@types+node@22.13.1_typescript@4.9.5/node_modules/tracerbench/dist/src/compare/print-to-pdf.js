"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chrome_debugging_client_1 = require("chrome-debugging-client");
const fs_extra_1 = require("fs-extra");
const listr = require("listr");
const utils_1 = require("../helpers/utils");
/**
 * Spawn a chrome process and visit the given url. Wait until page load event is fired
 * and then create PDF.
 *
 * @param url - URL of page for chrome to visit
 * @param outputPath - Output pdf to this file
 */
async function printToPDF(url, outputPath) {
    const tasks = new listr([
        {
            title: "Generating Benchmark Reports",
            task: async () => {
                await chromePrintToPDF(url, outputPath);
            },
        },
    ]);
    await tasks.run().catch((error) => {
        throw new Error(error);
    });
    return;
}
exports.default = printToPDF;
async function chromePrintToPDF(url, outputPath) {
    const chrome = (0, chrome_debugging_client_1.spawnChrome)({ headless: true });
    try {
        const browser = chrome.connection;
        const { targetId } = await browser.send("Target.createTarget", {
            url: "about:blank",
        });
        const page = await browser.attachToTarget(targetId);
        await page.send("Page.enable");
        await Promise.all([
            page.until("Page.loadEventFired"),
            page.send("Page.navigate", { url }),
        ]);
        // sleep required for chart.js to animate the graphs in
        // we want this feature for the web view
        await (0, utils_1.sleep)(2000);
        const { data } = await page.send("Page.printToPDF", {});
        (0, fs_extra_1.writeFileSync)(outputPath, Buffer.from(data, "base64"));
        await chrome.close();
    }
    finally {
        if (chrome) {
            await chrome.dispose();
        }
    }
}
//# sourceMappingURL=print-to-pdf.js.map