import { hasCompleted, thunkBrand } from "./internal";
import once from "./once";
/**
 * Creates a tuple of a function to lazily build a promise of a one time event
 * and a method to complete the promise.
 */
export default function oneshot() {
    let result;
    let onResolve;
    const thunk = once(() => thunk[hasCompleted]
        ? Promise.resolve(result)
        : new Promise(resolve => {
            onResolve = resolve;
        }));
    thunk[thunkBrand] = true;
    thunk[hasCompleted] = false;
    const complete = value => {
        if (thunk[hasCompleted]) {
            return;
        }
        thunk[hasCompleted] = true;
        result = value;
        if (onResolve !== undefined) {
            onResolve(value);
        }
    };
    return [thunk, complete];
}
function isOneshot(task) {
    return thunkBrand in task && hasCompleted in task;
}
export function intoOneshot(task) {
    if (isOneshot(task)) {
        return task;
    }
    const thunk = once(async () => {
        try {
            return await task();
        }
        finally {
            thunk[hasCompleted] = true;
        }
    });
    thunk[hasCompleted] = false;
    return thunk;
}
//# sourceMappingURL=oneshot.js.map