import { hasCompleted } from "./internal";
import isCancellation from "./isCancellation";
import newCancellation from "./newCancellation";
import { intoOneshot } from "./oneshot";
/**
 * Create a race cancellation function.
 *
 * @param cancellation lazily builds the cancellation promise chain.
 * @param newCancellation a function that creates the cancellation result.
 */
export default function newRaceCancellation(cancellation, cancellationMessage, cancellationKind) {
    const cancellationOneshot = intoOneshot(cancellation);
    const intoCancellation = newIntoCancellation(cancellationMessage, cancellationKind);
    return task => raceCancellation(cancellationOneshot, task, intoCancellation);
}
function raceCancellation(cancellation, task, intoCancellation) {
    return typeof task === "function"
        ? cancellation[hasCompleted]
            ? cancellation().then(intoCancellation)
            : Promise.race([task(), cancellation().then(intoCancellation)])
        : Promise.race([task, cancellation().then(intoCancellation)]);
}
function newIntoCancellation(cancellationMessage, cancellationKind) {
    return function intoCancellation(result) {
        if (isCancellation(result)) {
            return result;
        }
        return newCancellation(cancellationKind, cancellationMessage);
    };
}
//# sourceMappingURL=newRaceCancellation.js.map