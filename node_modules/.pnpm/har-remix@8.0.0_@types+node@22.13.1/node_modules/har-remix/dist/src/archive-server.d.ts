/// <reference types="node" />
import type { Archive, Entry } from '@tracerbench/har';
import type { IncomingMessage, Server, ServerResponse } from 'http';
import type { MapLike, Response, ServerDelegate } from './interfaces';
export default class ArchiveServer {
    private delegate;
    private responses;
    constructor(delegate: ServerDelegate);
    loadArchive(path: string): void;
    addArchive(har: Archive): void;
    addArchiveEntries(entries: Entry[]): void;
    addArchiveEntry(entry: Entry): void;
    buildResponseForArchiveEntry(entry: Entry, key: string): Response | undefined;
    buildResponse(statusCode: number, mimeType: string, body: Buffer | undefined, compress: boolean): Response;
    buildHeaders(mimeType: string, body: Buffer | undefined, compressed: boolean): MapLike<string>;
    addResponse(key: string, response: Response): void;
    setResponse(key: string, response: Response): void;
    responseFor(key: string): Response | undefined;
    handle(request: IncomingMessage, response: ServerResponse): Promise<void>;
    createServer(): Server;
}
//# sourceMappingURL=archive-server.d.ts.map