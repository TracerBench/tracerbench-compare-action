import newProtocolError from "./newProtocolError";
import newSessions from "./newSessions";
/**
 * Adapts a AttachJsonRpcTransport function to a AttachProtocolTransport function.
 *
 * Adds support for flattened sessions and creates JSON RPC Request object and unwraps Response.
 *
 * @param attach
 */
export default function newAttachProtocolTransport(attach) {
    return (onEvent, onError, onClose) => {
        const [sendRequest, raceClose] = attach(onNotification, onError, onClose);
        const [attachSession, detachSession, dispatchEvent] = newSessions(send, raceClose);
        return [attachSession, detachSession, send, raceClose];
        function onNotification(notification) {
            const { method, params, sessionId } = notification;
            if (sessionId === undefined) {
                onEvent(method, params);
            }
            else {
                dispatchEvent(sessionId, method, params);
            }
        }
        async function send(method, params, raceCancellation, sessionId) {
            const request = {
                method,
                params,
                sessionId,
            };
            const response = await sendRequest(request, raceCancellation);
            if ("error" in response) {
                throw newProtocolError(request, response);
            }
            return response.result;
        }
    };
}
//# sourceMappingURL=newAttachProtocolTransport.js.map