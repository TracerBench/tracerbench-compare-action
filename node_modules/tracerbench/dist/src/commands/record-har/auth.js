"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable filenames/match-exported */
const core_1 = require("@tracerbench/core");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const command_config_1 = require("../../command-config");
const default_flag_args_1 = require("../../command-config/default-flag-args");
const flags_1 = require("../../helpers/flags");
class RecordHARAuth extends command_config_1.TBBaseCommand {
    async init() {
        const { flags } = this.parse(RecordHARAuth);
        flags.dest = !flags.dest ? process.cwd() : flags.dest;
        this.parsedConfig = (0, command_config_1.getConfig)(flags.config, flags, this.explicitFlags);
    }
    async run() {
        const { headless, url, username, password, filename, dest, screenshots, proxy, tbResultsFolder, } = this.parsedConfig;
        // getConfig will always return defaultFlagArgs
        const resultsDir = tbResultsFolder;
        let { browserArgs } = this.parsedConfig;
        // if headless flag is true include the headless flags
        if (headless) {
            browserArgs = Array.isArray(browserArgs)
                ? browserArgs.concat(default_flag_args_1.headlessFlags)
                : default_flag_args_1.headlessFlags;
        }
        // if using a proxy server include the chrome switch with proxy url
        if (proxy) {
            const proxyServer = [`--proxy-server=https=${proxy}`];
            browserArgs = Array.isArray(browserArgs)
                ? browserArgs.concat(proxyServer)
                : proxyServer;
        }
        // results folder
        (0, fs_extra_1.mkdirpSync)(resultsDir);
        (0, fs_extra_1.mkdirpSync)(dest);
        this.log(`Retrieving cookies ...`);
        // login to the url provided and retrieve the cookies
        const authClientResponse = await (0, core_1.authClient)(url, username, password, headless, browserArgs, screenshots);
        const cookiesPath = (0, path_1.resolve)((0, path_1.join)(dest, `${filename}.json`));
        if (screenshots && authClientResponse.screenshotData) {
            authClientResponse.screenshotData.map((screenshot) => {
                const screenshotName = `record-har-auth-${screenshot.name}-screenshot.png`;
                const screenshotPath = (0, path_1.resolve)((0, path_1.join)(resultsDir, screenshotName));
                (0, fs_extra_1.writeFileSync)(screenshotPath, screenshot.data, {
                    encoding: "base64",
                });
                this.log(`  ✔ ${screenshot.name} screenshot: ${screenshotPath}`);
            });
        }
        (0, fs_extra_1.writeFileSync)(cookiesPath, JSON.stringify(authClientResponse.cookies));
        this.log(`  ✔ Cookies: ${cookiesPath}`);
        return authClientResponse.cookies;
    }
}
exports.default = RecordHARAuth;
RecordHARAuth.description = "Authenticate with a given login URL, username, password and retrieve auth cookies";
RecordHARAuth.flags = {
    url: (0, flags_1.url)({ required: true, default: undefined }),
    dest: (0, flags_1.dest)({ required: true }),
    filename: (0, flags_1.filename)({ required: true, default: "cookies" }),
    username: (0, flags_1.username)({ required: true }),
    password: (0, flags_1.password)({ required: true }),
    config: (0, flags_1.config)(),
    headless: flags_1.headless,
    screenshots: flags_1.screenshots,
    proxy: (0, flags_1.proxy)(),
    tbResultsFolder: (0, flags_1.tbResultsFolder)(),
};
//# sourceMappingURL=auth.js.map