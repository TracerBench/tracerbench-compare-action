export interface Bucket {
    min: number;
    max: number;
    count: {
        control: number;
        experiment: number;
    };
}
export declare type ISevenFigureSummary = {
    [key in string | number]: number;
} & {
    min: number;
    max: number;
    10: number;
    25: number;
    50: number;
    75: number;
    90: number;
};
export interface IOutliers {
    IQR: number;
    outliers: number[];
    lowerOutlier: number;
    upperOutlier: number;
}
export interface IStatsOptions {
    control: number[];
    experiment: number[];
    name: string;
    confidenceLevel?: 0.8 | 0.85 | 0.9 | 0.95 | 0.99 | 0.995 | 0.999;
}
export declare type IAsPercentage = {
    percentMin: number;
    percentMedian: number;
    percentMax: number;
};
export declare type IConfidenceInterval = {
    min: number;
    median: number;
    max: number;
    zScore: number;
    isSig: boolean;
    pValue: number;
    U: number;
    asPercent: IAsPercentage;
};
/**
 * Statistics class which powers the TracerBench statistical reporter
 *
 *
 * @param options - IStatsOptions
 * @param unitConverterFn - Optional unit converter function which takes a number and returns a number
 */
export declare class Stats {
    readonly name: string;
    estimator: number;
    readonly sparkLine: {
        control: string;
        experiment: string;
    };
    confidenceIntervals: {
        [key: number]: IConfidenceInterval;
    };
    confidenceInterval: IConfidenceInterval;
    sevenFigureSummary: {
        control: ISevenFigureSummary;
        experiment: ISevenFigureSummary;
    };
    outliers: {
        control: IOutliers;
        experiment: IOutliers;
    };
    readonly sampleCount: {
        control: number;
        experiment: number;
    };
    experimentSorted: number[];
    controlSorted: number[];
    buckets: Bucket[];
    range: {
        min: number;
        max: number;
    };
    populationVariance: {
        control: number;
        experiment: number;
    };
    control: number[];
    experiment: number[];
    constructor(options: IStatsOptions, unitConverterFn?: (n: number) => number);
    private convertAllUnits;
    private getOutliers;
    private getSevenFigureSummary;
    private getConfidenceInterval;
    private getHodgesLehmann;
    private getRange;
    private getHistogram;
    private getSparkline;
    private getBuckets;
    private getPopulationVariance;
}
//# sourceMappingURL=stats.d.ts.map