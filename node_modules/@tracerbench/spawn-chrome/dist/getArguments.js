"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const defaultFlags_1 = require("./defaultFlags");
function getArguments(userDataDir, options) {
    let args = [
        "--remote-debugging-pipe",
        `--user-data-dir=${userDataDir}`,
    ];
    if (options.disableDefaultArguments !== true) {
        args.push(...defaultFlags_1.default);
    }
    if (options.additionalArguments !== undefined &&
        Array.isArray(options.additionalArguments)) {
        args.push(...options.additionalArguments);
    }
    if (options.headless === true) {
        args.push(...defaultFlags_1.headlessFlags);
    }
    args = cleanupArgs(args);
    if (typeof options.url === "string" && options.url.length > 0) {
        args.push(options.url);
    }
    return args;
}
exports.default = getArguments;
function cleanupArgs(args) {
    const set = new Set();
    const disabledFeatures = new Set();
    const enabledFeatures = new Set();
    for (const arg of args) {
        if (parseCommaDelimitedArg(enabledFeatures, "--enable-features=", arg)) {
            continue;
        }
        if (parseCommaDelimitedArg(disabledFeatures, "--disable-features=", arg)) {
            continue;
        }
        set.add(arg);
    }
    const cleaned = Array.from(set);
    if (enabledFeatures.size > 0) {
        cleaned.push(`--enable-features=${formatCommaDelimitedArg(enabledFeatures)}`);
    }
    if (disabledFeatures.size > 0) {
        cleaned.push(`--disable-features=${formatCommaDelimitedArg(disabledFeatures)}`);
    }
    return cleaned;
}
function parseCommaDelimitedArg(set, prefix, arg) {
    if (arg.startsWith(prefix)) {
        for (const item of arg.slice(prefix.length).split(",")) {
            set.add(item);
        }
        return true;
    }
    return false;
}
function formatCommaDelimitedArg(set) {
    return Array.from(set).join(",");
}
//# sourceMappingURL=getArguments.js.map