"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bounds_1 = require("../util/bounds");
const cache_1 = require("../util/cache");
const thread_builder_1 = require("./thread-builder");
class ProcessModelImpl {
    constructor(trace, { pid, name, labels, sortIndex, start, end, events, threads }) {
        this.trace = trace;
        this.id = pid;
        this.name = name;
        this.labels = labels;
        this.sortIndex = sortIndex;
        this.start = start;
        this.end = end;
        this.events = events;
        this.threads = Array.from(threads, (builder) => builder.build(this));
        this.threads.sort((a, b) => a.sortIndex - b.sortIndex);
    }
    get duration() {
        return this.end - this.start;
    }
    get isRenderer() {
        return this.name === "Renderer" /* PROCESS_NAME_RENDERER */;
    }
}
class ProcessBuilder {
    constructor(pid) {
        this.name = '';
        this.labels = '';
        this.sortIndex = 0;
        this.bounds = undefined;
        this.events = [];
        this.pid = pid;
        this.threads = new cache_1.default((tid) => new thread_builder_1.default(pid, tid));
    }
    get start() {
        var _a, _b;
        return (_b = (_a = this.bounds) === null || _a === void 0 ? void 0 : _a.start) !== null && _b !== void 0 ? _b : 0;
    }
    get end() {
        var _a, _b;
        return (_b = (_a = this.bounds) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : 0;
    }
    get isRenderer() {
        return this.name === "Renderer" /* PROCESS_NAME_RENDERER */;
    }
    thread(tid) {
        return this.threads.get(tid);
    }
    extendBounds(event) {
        const { tid, start, end } = event;
        if (this.bounds === undefined) {
            this.bounds = new bounds_1.default(start, end);
        }
        else {
            this.bounds.extend(start, end);
        }
        if (tid) {
            this.thread(tid).extendBounds(event);
        }
    }
    addMetadata(event) {
        const { tid, name } = event;
        switch (name) {
            case "process_name" /* METADATA_NAME_PROCESS_NAME */:
                this.name = event.getStringArg("name" /* METADATA_ARG_NAME */, '');
                break;
            case "process_labels" /* METADATA_NAME_PROCESS_LABELS */:
                this.labels = event.getStringArg("labels" /* METADATA_ARG_LABELS */, '');
                break;
            case "process_sort_index" /* METADATA_NAME_PROCESS_SORT_INDEX */:
                this.sortIndex = event.getNumberArg("sort_index" /* METADATA_ARG_SORT_INDEX */, 0);
                break;
            default:
                if (tid)
                    this.thread(tid).addMetadata(event);
                break;
        }
    }
    addEvent(event) {
        const { tid } = event;
        this.events.push(event);
        if (tid) {
            this.thread(tid).addEvent(event);
        }
    }
    build(trace) {
        return new ProcessModelImpl(trace, this);
    }
}
exports.default = ProcessBuilder;
//# sourceMappingURL=process-builder.js.map