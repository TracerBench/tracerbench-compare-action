"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chrome_launcher_1 = require("chrome-launcher");
const fs = require("fs");
const darwinWellKnown = [
    "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
    "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
];
let cache;
function findChrome() {
    if (cache !== undefined) {
        return cache;
    }
    let path = checkEnv();
    if (!path) {
        if (process.platform === "darwin") {
            path = darwinQuickFind();
        }
        else {
            path = findInstallation();
        }
    }
    if (!path) {
        throw new Error(`Failed to find a Chrome installation`);
    }
    cache = path;
    return path;
}
exports.default = findChrome;
function checkEnv() {
    const path = process.env.CHROME_PATH;
    if (path) {
        return path;
    }
}
function findInstallation() {
    const paths = chrome_launcher_1.Launcher.getInstallations();
    if (paths.length > 0) {
        return paths[0];
    }
}
function darwinQuickFind() {
    // lsregister is super slow, check some well know paths first
    for (const path of darwinWellKnown) {
        if (checkAccess(path)) {
            return path;
        }
    }
    return findInstallation();
}
function checkAccess(path) {
    try {
        fs.accessSync(path, fs.constants.X_OK);
        return true;
    }
    catch (_a) {
        return false;
    }
}
//# sourceMappingURL=index.js.map