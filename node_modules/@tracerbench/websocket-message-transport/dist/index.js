"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const race_cancellation_1 = require("race-cancellation");
const NodeWebSocket = require("ws");
async function openWebSocket(url, raceCancellation) {
    const ws = new NodeWebSocket(url);
    let lastError;
    ws.on("error", (err) => {
        lastError = err;
    });
    await race_cancellation_1.disposablePromise((resolve, reject) => {
        ws.on("open", resolve);
        ws.on("close", onClose);
        function onClose() {
            let message = `Failed to open ${url}`;
            if (lastError !== undefined && lastError.stack) {
                message += `: ${lastError.stack}`;
            }
            reject(new Error(message));
        }
        return () => {
            ws.removeListener("open", resolve);
            ws.removeListener("close", onClose);
        };
    }, raceCancellation);
    return [
        (onMessage, onClose) => {
            // we should be open still when attach is called
            // but double check here
            if (ws.readyState !== ws.OPEN) {
                setImmediate(handleClose);
            }
            let called = false;
            function handleClose() {
                if (called) {
                    return;
                }
                called = true;
                ws.removeListener("message", onMessage);
                ws.removeListener("close", handleClose);
                onClose(lastError);
            }
            ws.on("message", onMessage);
            ws.on("close", handleClose);
            return (message) => ws.send(message);
        },
        () => ws.close(),
    ];
}
exports.default = openWebSocket;
//# sourceMappingURL=index.js.map