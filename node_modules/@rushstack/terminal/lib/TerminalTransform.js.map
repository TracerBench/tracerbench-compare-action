{"version":3,"file":"TerminalTransform.js","sourceRoot":"","sources":["../src/TerminalTransform.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,yDAAqF;AA2BrF;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAsB,iBAAkB,SAAQ,mCAAgB;IAO9D,YAAmB,OAAkC;QACnD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,2BAA2B,GAAG,CAAC,CAAC,OAAO,CAAC,2BAA2B,CAAC;IAC3E,CAAC;IAED,gBAAgB;IACN,OAAO;QACf,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAED;;;;;;;;;;;OAWG;IACO,oBAAoB;QAC5B,IAAI,CAAC,IAAI,CAAC,2BAA2B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;YAC5E,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;CACF;AAnCD,8CAmCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { TerminalWritable, type ITerminalWritableOptions } from './TerminalWritable';\n\n/**\n * Constructor options for {@link TerminalTransform}.\n *\n * @public\n */\nexport interface ITerminalTransformOptions extends ITerminalWritableOptions {\n  /**\n   * The target `TerminalWritable` that the `TerminalTransform` will write its\n   * output to.\n   */\n  destination: TerminalWritable;\n\n  /**\n   * Prevents the {@link TerminalTransform.destination} object from being\n   * closed automatically when the transform is closed.\n   *\n   * @remarks\n   * When a transform is closed, normally it will automatically close its destination\n   * `TerminalWritable` object.  There are two ways to prevent that: either by setting\n   * `preventDestinationAutoclose` to `true` for the transform, or by setting\n   * {@link TerminalWritable.preventAutoclose} to `true` for the `destination` object.\n   */\n  preventDestinationAutoclose?: boolean;\n}\n\n/**\n * The abstract base class for {@link TerminalWritable} objects that receive an input,\n * transform it somehow, and then write the output to another `TerminalWritable`.\n *\n * @remarks\n *\n * The `TerminalTransform` and {@link SplitterTransform} base classes formalize the idea\n * of modeling data flow as a directed acyclic graph of reusable transforms, whose\n * final outputs are `TerminalWritable` objects.\n *\n * The design is based loosely on the `WritableStream` and `TransformStream` classes from\n * the system {@link https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Concepts\n * | Streams API}, except that instead of asynchronous byte streams, the `TerminalWritable`\n * system synchronously transmits human readable messages intended to be rendered on a\n * text console or log file.\n *\n * The main feature of the `TerminalTransform` class is its {@link TerminalTransform.destination}\n * property, which tracks the next link in the graph.\n *\n * @public\n */\nexport abstract class TerminalTransform extends TerminalWritable {\n  /** {@inheritDoc ITerminalTransformOptions.destination} */\n  public readonly destination: TerminalWritable;\n\n  /** {@inheritDoc ITerminalTransformOptions.preventDestinationAutoclose} */\n  public readonly preventDestinationAutoclose: boolean;\n\n  public constructor(options: ITerminalTransformOptions) {\n    super();\n    this.destination = options.destination;\n    this.preventDestinationAutoclose = !!options.preventDestinationAutoclose;\n  }\n\n  /** @override */\n  protected onClose(): void {\n    this.autocloseDestination();\n  }\n\n  /**\n   * The default implementation of {@link TerminalTransform.onClose} calls this\n   * method, which closes the {@link TerminalTransform.destination} if appropriate.\n   *\n   * @remarks\n   * The destination will not be closed if its {@link TerminalWritable.preventAutoclose}\n   * property is `true`.  The destination will not be closed if\n   * {@link ITerminalTransformOptions.preventDestinationAutoclose}\n   * is `true`.\n   *\n   * @sealed\n   */\n  protected autocloseDestination(): void {\n    if (!this.preventDestinationAutoclose && !this.destination.preventAutoclose) {\n      this.destination.close();\n    }\n  }\n}\n"]}