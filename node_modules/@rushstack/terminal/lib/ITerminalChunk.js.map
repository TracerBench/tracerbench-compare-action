{"version":3,"file":"ITerminalChunk.js","sourceRoot":"","sources":["../src/ITerminalChunk.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D;;;GAGG;AACH,IAAY,iBAUX;AAVD,WAAY,iBAAiB;IAC3B;;OAEG;IACH,iCAAY,CAAA;IAEZ;;OAEG;IACH,iCAAY,CAAA;AACd,CAAC,EAVW,iBAAiB,iCAAjB,iBAAiB,QAU5B","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * Specifies the kind of data represented by a {@link ITerminalChunk} object.\n * @public\n */\nexport enum TerminalChunkKind {\n  /**\n   * Indicates a `ITerminalChunk` object representing `stdout` console output.\n   */\n  Stdout = 'O',\n\n  /**\n   * Indicates a `ITerminalChunk` object representing `stderr` console output.\n   */\n  Stderr = 'E'\n}\n\n/**\n * Represents a chunk of output that will ultimately be written to a {@link TerminalWritable}.\n *\n * @remarks\n * Today `ITerminalChunk` represents the `stdout` and `stderr` text streams.  In the future,\n * we plan to expand it to include other console UI elements such as instructions for displaying\n * an interactive progress bar.  We may also add other metadata, for example tracking whether\n * the `text` string is known to contain color codes or not.\n *\n * The `ITerminalChunk` object should be considered to be immutable once it is created.\n * For example, {@link SplitterTransform} may pass the same chunk to multiple destinations.\n *\n * @public\n */\nexport interface ITerminalChunk {\n  /**\n   * Indicates the kind of information stored in this chunk.\n   *\n   * @remarks\n   * More kinds will be introduced in the future.  Implementors of\n   * {@link TerminalWritable.onWriteChunk} should ignore unrecognized `TerminalChunkKind`\n   * values.  `TerminalTransform` implementors should pass along unrecognized chunks\n   * rather than discarding them.\n   */\n  kind: TerminalChunkKind;\n\n  /**\n   * The next chunk of text from the `stderr` or `stdout` stream.\n   */\n  text: string;\n}\n"]}