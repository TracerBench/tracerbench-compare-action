{"version":3,"file":"ToSdpConvertHelper.js","sourceRoot":"","sources":["../../src/utils/ToSdpConvertHelper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type {\n  IYamlItem,\n  IYamlApiFile,\n  IYamlSyntax,\n  IYamlReferenceSpec,\n  IYamlReference\n} from '../yaml/IYamlApiFile';\nimport type {\n  PackageYamlModel,\n  EnumYamlModel,\n  TypeAliasYamlModel,\n  TypeYamlModel,\n  FieldYamlModel,\n  FunctionYamlModel,\n  CommonYamlModel\n} from '../yaml/ISDPYamlFile';\nimport path from 'path';\nimport { FileSystem, Encoding, NewlineKind } from '@rushstack/node-core-library';\nimport yaml = require('js-yaml');\n\nexport function convertUDPYamlToSDP(folderPath: string): void {\n  convert(folderPath, folderPath);\n}\n\nfunction convert(inputPath: string, outputPath: string): void {\n  console.log();\n  if (!FileSystem.exists(inputPath)) {\n    console.error(`input path: ${inputPath} is not exist`);\n    return;\n  }\n\n  FileSystem.readFolderItemNames(inputPath).forEach((name) => {\n    const fpath: string = path.join(inputPath, name);\n    if (FileSystem.getStatistics(fpath).isFile()) {\n      // only convert yaml\n      if (!name.endsWith('.yml')) {\n        return;\n      }\n      // parse file\n      const yamlContent: string = FileSystem.readFile(fpath, { encoding: Encoding.Utf8 });\n      // only convert universalreference yaml\n      const isLegacyYaml: boolean = yamlContent.startsWith('### YamlMime:UniversalReference');\n      if (!isLegacyYaml) {\n        return;\n      }\n\n      console.log(`convert file ${fpath} from udp to sdp`);\n\n      const file: IYamlApiFile = yaml.safeLoad(yamlContent) as IYamlApiFile;\n      const result: { model: CommonYamlModel; type: string } | undefined = convertToSDP(file);\n      if (result && result.model) {\n        const stringified: string = `### YamlMime:TS${result.type}\\n${yaml.safeDump(result.model, {\n          lineWidth: 120\n        })}`;\n        FileSystem.writeFile(`${outputPath}/${name}`, stringified, {\n          convertLineEndings: NewlineKind.CrLf,\n          ensureFolderExists: true\n        });\n      } else {\n        console.log('not target file ', fpath);\n      }\n    } else {\n      // read contents\n      convert(fpath, path.join(outputPath, name));\n    }\n  });\n}\n\nfunction convertToPackageSDP(transfomredClass: IYamlApiFile): PackageYamlModel {\n  const element: IYamlItem = transfomredClass.items[0];\n  const packageModel: PackageYamlModel = {\n    uid: element.uid,\n    name: element.name!,\n    type: 'package'\n  };\n  if (element.summary) {\n    packageModel.summary = element.summary;\n  } else {\n    packageModel.summary = '';\n  }\n\n  // search in children\n  if (element.children) {\n    element.children.forEach((child) => {\n      if (child.endsWith(':class')) {\n        assignPackageModelFields(packageModel, 'classes', child);\n      } else if (child.endsWith(':interface')) {\n        assignPackageModelFields(packageModel, 'interfaces', child);\n      } else if (child.endsWith(':enum')) {\n        assignPackageModelFields(packageModel, 'enums', child);\n      } else if (child.endsWith(':type')) {\n        assignPackageModelFields(packageModel, 'typeAliases', child);\n      } else {\n        // console.log(\"other type: \", child)\n      }\n    });\n  }\n\n  for (let i: number = 1; i < transfomredClass.items.length; i++) {\n    const ele: IYamlItem = transfomredClass.items[i];\n    switch (ele.type) {\n      case 'typealias':\n        // need generate typeAlias file for this\n        break;\n      case 'function':\n        if (!packageModel.functions) {\n          packageModel.functions = [];\n        }\n        packageModel.functions.push(convertToFunctionSDP(ele, element.uid, transfomredClass));\n        break;\n      default:\n        // console.log(transfomredClass.items[0].name)\n        console.log('[warning] not applied type(package): ', ele.type);\n    }\n  }\n\n  return packageModel;\n}\n\nfunction assignPackageModelFields(\n  packageModel: PackageYamlModel,\n  name: 'classes' | 'interfaces' | 'enums' | 'typeAliases',\n  uid: string\n): void {\n  if (!packageModel[name]) {\n    packageModel[name] = [];\n  }\n  packageModel[name]!.push(uid);\n}\n\nfunction convertToSDP(transfomredClass: IYamlApiFile): { model: CommonYamlModel; type: string } | undefined {\n  const element: IYamlItem = transfomredClass.items[0];\n  switch (element.type) {\n    case 'class':\n    case 'interface':\n      return {\n        model: convertToTypeSDP(transfomredClass, element.type === 'class'),\n        type: 'Type'\n      };\n    case 'enum':\n      if (transfomredClass.items.length < 2) {\n        console.log(`[warning] enum ${element.uid}/${element.name} does not have fields`);\n        return undefined;\n      }\n      return { model: convertToEnumSDP(transfomredClass), type: 'Enum' };\n    case 'typealias':\n      return { model: convertToTypeAliasSDP(element, transfomredClass), type: 'TypeAlias' };\n    case 'package':\n      return {\n        model: convertToPackageSDP(transfomredClass),\n        type: 'Package'\n      };\n    default:\n      console.log('not applied type: ', element.type);\n      return undefined;\n  }\n}\n\nfunction convertToEnumSDP(transfomredClass: IYamlApiFile): EnumYamlModel {\n  const element: IYamlItem = transfomredClass.items[0];\n  const fields: FieldYamlModel[] = [];\n  for (let i: number = 1; i < transfomredClass.items.length; i++) {\n    const ele: IYamlItem = transfomredClass.items[i];\n    const field: FieldYamlModel = {\n      name: ele.name!,\n      uid: ele.uid,\n      package: element.package!\n    };\n\n    if (ele.summary) {\n      field.summary = ele.summary;\n    } else {\n      field.summary = '';\n    }\n\n    if (ele.numericValue) {\n      field.value = ele.numericValue;\n    }\n    fields.push(field);\n  }\n\n  const result: EnumYamlModel = {\n    ...convertCommonYamlModel(element, element.package!, transfomredClass),\n    fields: fields\n  };\n  return result;\n}\n\nfunction convertToTypeAliasSDP(element: IYamlItem, transfomredClass: IYamlApiFile): TypeAliasYamlModel {\n  const result: TypeAliasYamlModel = {\n    ...convertCommonYamlModel(element, element.package!, transfomredClass)\n  } as TypeAliasYamlModel;\n\n  if (element.syntax) {\n    result.syntax = element.syntax.content!;\n  }\n  return result;\n}\n\nfunction convertToTypeSDP(transfomredClass: IYamlApiFile, isClass: boolean): TypeYamlModel {\n  const element: IYamlItem = transfomredClass.items[0];\n  const constructors: CommonYamlModel[] = [];\n  const properties: CommonYamlModel[] = [];\n  const methods: CommonYamlModel[] = [];\n  const events: CommonYamlModel[] = [];\n  for (let i: number = 1; i < transfomredClass.items.length; i++) {\n    const ele: IYamlItem = transfomredClass.items[i];\n    const item: CommonYamlModel = convertCommonYamlModel(ele, element.package!, transfomredClass);\n    if (ele.type === 'constructor') {\n      // interface does not need this field\n      if (isClass) {\n        constructors.push(item);\n      }\n    } else if (ele.type === 'property') {\n      properties.push(item);\n    } else if (ele.type === 'method') {\n      methods.push(item);\n    } else if (ele.type === 'event') {\n      events.push(item);\n    } else {\n      console.log(`[warning] ${ele.uid}#${ele.name} is not applied sub type ${ele.type} for type yaml`);\n    }\n  }\n  const result: TypeYamlModel = {\n    ...convertCommonYamlModel(element, element.package!, transfomredClass),\n    type: isClass ? 'class' : 'interface'\n  };\n  delete result.syntax;\n\n  if (constructors.length > 0) {\n    result.constructors = constructors;\n  }\n\n  if (properties.length > 0) {\n    result.properties = properties;\n  }\n\n  if (methods.length > 0) {\n    result.methods = methods;\n  }\n\n  if (events.length > 0) {\n    result.events = events;\n  }\n\n  if (element.extends && element.extends.length > 0) {\n    result.extends = convertSelfTypeToXref(element.extends[0] as string, transfomredClass);\n  }\n  return result;\n}\n\nfunction convertToFunctionSDP(\n  element: IYamlItem,\n  packageName: string,\n  transfomredClass: IYamlApiFile\n): FunctionYamlModel {\n  const model: CommonYamlModel = convertCommonYamlModel(element, packageName, transfomredClass);\n  // don't need these fields\n  delete model.fullName;\n  return model;\n}\n\nfunction convertCommonYamlModel(\n  element: IYamlItem,\n  packageName: string,\n  transfomredClass: IYamlApiFile\n): CommonYamlModel {\n  const result: CommonYamlModel = {\n    name: element.name!,\n    uid: element.uid,\n    package: packageName\n  };\n\n  if (element.fullName) {\n    result.fullName = element.fullName;\n  }\n\n  if (element.summary) {\n    result.summary = element.summary;\n  } else {\n    result.summary = '';\n  }\n\n  // because mustache meet same variable in different level\n  // such as: { \"pre\": true, \"list\": [{}]}\n  // if item in list wants to use pre but the pre is not assigned, it will use outer pre field.\n  // so, there need to set below variable explict\n\n  if (element.remarks) {\n    result.remarks = element.remarks;\n  } else {\n    result.remarks = '';\n  }\n\n  if (element.example) {\n    result.example = element.example;\n  } else {\n    result.example = [];\n  }\n\n  result.isPreview = element.isPreview;\n  if (!result.isPreview) {\n    result.isPreview = false;\n  }\n\n  if (element.deprecated) {\n    result.isDeprecated = true;\n    result.customDeprecatedMessage = element.deprecated.content;\n  } else {\n    result.isDeprecated = false;\n  }\n\n  if (element.syntax) {\n    result.syntax = {};\n\n    const syntax: IYamlSyntax = element.syntax;\n    result.syntax.content = syntax.content;\n    if (syntax.parameters && syntax.parameters.length > 0) {\n      syntax.parameters?.forEach((it) => {\n        delete it.optional;\n        delete it.defaultValue;\n      });\n      result.syntax.parameters = syntax.parameters.map((it) => {\n        return {\n          ...it,\n          id: it.id!,\n          type: convertSelfTypeToXref(escapeMarkdown(it.type![0] as string), transfomredClass)\n        };\n      });\n    }\n\n    if (syntax.return) {\n      result.syntax.return = {\n        ...syntax.return,\n        type: convertSelfTypeToXref(escapeMarkdown(syntax.return.type![0] as string), transfomredClass)\n      };\n    }\n  }\n\n  return result;\n}\n\nfunction escapeMarkdown(name: string): string {\n  // eg: [key: string]: string\n  const markdownLinkRegEx: RegExp = /^\\s*(\\[.+\\]):(.+)/g;\n  return name.replace(markdownLinkRegEx, `$1\\\\:$2`);\n}\n\nfunction convertSelfTypeToXref(name: string, transfomredClass: IYamlApiFile): string {\n  let result: string = name;\n\n  // if complex type, need to get real type from references\n  if (result.endsWith(':complex')) {\n    const specs: IYamlReferenceSpec[] | undefined = transfomredClass.references?.find((item) => {\n      return item.uid === name;\n    })?.['spec.typeScript'];\n\n    if (specs && specs.length > 0) {\n      result = '';\n      for (const spec of specs) {\n        // start with ! will be node base type\n        if (spec.uid && !spec.uid.startsWith('!')) {\n          result += spec.uid;\n        } else {\n          result += spec.name;\n        }\n      }\n    }\n  } else if (result.startsWith('!')) {\n    // uid: '!Object:interface'\n    // name: Object\n    // start with !, not complex type, use reference name directly\n    const ref: IYamlReference | undefined = transfomredClass.references?.find((item) => {\n      return item.uid === name;\n    });\n    if (ref && ref.name) {\n      result = ref.name;\n    }\n  }\n  // parse < >\n  result = result.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  const uidRegEx: RegExp = /(@?[\\w\\d\\-/!~\\.]+\\:[\\w\\d\\-\\(/]+)/g;\n\n  return result.replace(uidRegEx, `<xref uid=\"$1\" />`);\n}\n"]}