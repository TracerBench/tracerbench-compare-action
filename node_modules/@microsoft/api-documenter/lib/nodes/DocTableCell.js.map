{"version":3,"file":"DocTableCell.js","sourceRoot":"","sources":["../../src/nodes/DocTableCell.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,4CAAgF;AAChF,2DAAwD;AAOxD;;GAEG;AACH,MAAa,YAAa,SAAQ,eAAO;IAGvC,YAAmB,UAAmC,EAAE,iBAA0C;QAChG,KAAK,CAAC,UAAU,CAAC,CAAC;QAElB,IAAI,CAAC,OAAO,GAAG,IAAI,kBAAU,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,EAAE,iBAAiB,CAAC,CAAC;IAC1F,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,OAAO,qCAAiB,CAAC,SAAS,CAAC;IACrC,CAAC;CACF;AAbD,oCAaC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { type IDocNodeParameters, DocNode, DocSection } from '@microsoft/tsdoc';\nimport { CustomDocNodeKind } from './CustomDocNodeKind';\n\n/**\n * Constructor parameters for {@link DocTableCell}.\n */\nexport interface IDocTableCellParameters extends IDocNodeParameters {}\n\n/**\n * Represents table cell, similar to an HTML `<td>` element.\n */\nexport class DocTableCell extends DocNode {\n  public readonly content: DocSection;\n\n  public constructor(parameters: IDocTableCellParameters, sectionChildNodes?: ReadonlyArray<DocNode>) {\n    super(parameters);\n\n    this.content = new DocSection({ configuration: this.configuration }, sectionChildNodes);\n  }\n\n  /** @override */\n  public get kind(): string {\n    return CustomDocNodeKind.TableCell;\n  }\n}\n"]}