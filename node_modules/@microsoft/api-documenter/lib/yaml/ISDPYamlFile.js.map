{"version":3,"file":"ISDPYamlFile.js","sourceRoot":"","sources":["../../src/yaml/ISDPYamlFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\ninterface IBaseYamlModel {\n  uid: string;\n  name: string;\n  package?: string;\n  summary?: string;\n}\n\nexport type CommonYamlModel = IBaseYamlModel & {\n  syntax?: ISyntax;\n  fullName?: string;\n  isPreview?: boolean;\n  isDeprecated?: boolean;\n  remarks?: string;\n  example?: string[];\n  customDeprecatedMessage?: string;\n};\n\nexport type PackageYamlModel = CommonYamlModel & {\n  classes?: Array<string>;\n  interfaces?: Array<string>;\n  enums?: Array<string>;\n  typeAliases?: Array<string>;\n  properties?: Array<FunctionYamlModel>;\n  type?: 'package' | 'module';\n  functions?: Array<FunctionYamlModel>;\n};\n\nexport type FunctionYamlModel = CommonYamlModel;\n\nexport type TypeAliasYamlModel = CommonYamlModel & {\n  syntax: string;\n};\n\nexport type TypeYamlModel = CommonYamlModel & {\n  constructors?: Array<FunctionYamlModel>;\n  properties?: Array<FunctionYamlModel>;\n  methods?: Array<FunctionYamlModel>;\n  events?: Array<FunctionYamlModel>;\n  type: 'class' | 'interface';\n  extends?: IType | string;\n};\n\nexport type EnumYamlModel = CommonYamlModel & {\n  fields: Array<FieldYamlModel>;\n};\n\nexport type FieldYamlModel = IBaseYamlModel & {\n  numericValue?: number;\n  value?: string;\n};\n\nexport interface ISyntax {\n  parameters?: Array<IYamlParameter>;\n  content?: string;\n  return?: IReturn;\n}\n\nexport interface IYamlParameter {\n  id: string;\n  type: IType | string;\n  description?: string;\n}\n\ninterface IReturn {\n  type: IType | string;\n  description?: string;\n}\n\nexport interface IType {\n  typeName?: string;\n  typeId?: number;\n  reflectedType?: IReflectedType;\n  genericType?: IGenericType;\n  intersectionType?: IIntersectionType;\n  unionType?: IUnionType;\n  arrayType?: IType | string;\n}\n\nexport interface IUnionType {\n  types: Types;\n}\n\nexport interface IIntersectionType {\n  types: Types;\n}\n\nexport interface IGenericType {\n  outter: IType | string;\n  inner: Types;\n}\n\nexport interface IReflectedType {\n  key: IType | string;\n  value: IType | string;\n}\n\nexport interface IException {\n  type: string;\n  description: string;\n}\n\ntype Types = IType[] | string[];\n"]}